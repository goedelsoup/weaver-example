/** DO NOT EDIT -- THIS FILE HAS BEEN GENERATED BY WEAVER */


/**
 * The number of messages sent, received, or processed in the scope of the batching operation.
 *
 * 
 *
 * * @example [0, 1, 2]
 *
 */
export const MESSAGING_BATCH_MESSAGE_COUNT = /** @type {const} */ 'messaging.batch.message_count';

/**
 * A unique identifier for the client that consumes or produces a message.

 *
 * 
 *
 * * @example ["client-5", "myhost@8742@s8083jm"]
 *
 */
export const MESSAGING_CLIENT_ID = /** @type {const} */ 'messaging.client.id';

/**
 * The name of the consumer group with which a consumer is associated.

 *
 * 
 *
 * * @example ["my-group", "indexer"]
 *
 */
export const MESSAGING_CONSUMER_GROUP_NAME = /** @type {const} */ 'messaging.consumer.group.name';

/**
 * A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).
 *
 * 
 *
 * 
 */
export const MESSAGING_DESTINATION_ANONYMOUS = /** @type {const} */ 'messaging.destination.anonymous';

/**
 * The message destination name
 *
 * 
 *
 * * @example ["MyQueue", "MyTopic"]
 *
 */
export const MESSAGING_DESTINATION_NAME = /** @type {const} */ 'messaging.destination.name';

/**
 * The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.

 *
 * 
 *
 * * @example 1
 *
 */
export const MESSAGING_DESTINATION_PARTITION_ID = /** @type {const} */ 'messaging.destination.partition.id';

/**
 * The name of the destination subscription from which a message is consumed.
 *
 * 
 *
 * * @example ["subscription-a"]
 *
 */
export const MESSAGING_DESTINATION_SUBSCRIPTION_NAME = /** @type {const} */ 'messaging.destination.subscription.name';

/**
 * Low cardinality representation of the messaging destination name
 *
 * 
 *
 * * @example ["/customers/{customerId}"]
 *
 */
export const MESSAGING_DESTINATION_TEMPLATE = /** @type {const} */ 'messaging.destination.template';

/**
 * A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.
 *
 * 
 *
 * 
 */
export const MESSAGING_DESTINATION_TEMPORARY = /** @type {const} */ 'messaging.destination.temporary';

/**
 * The UTC epoch seconds at which the message has been accepted and stored in the entity.

 *
 * 
 *
 * * @example 1701393730
 *
 */
export const MESSAGING_EVENTHUBS_MESSAGE_ENQUEUED_TIME = /** @type {const} */ 'messaging.eventhubs.message.enqueued_time';

/**
 * The ack deadline in seconds set for the modify ack deadline request.

 *
 * 
 *
 * * @example 10
 *
 */
export const MESSAGING_GCP_PUBSUB_MESSAGE_ACK_DEADLINE = /** @type {const} */ 'messaging.gcp_pubsub.message.ack_deadline';

/**
 * The ack id for a given message.

 *
 * 
 *
 * * @example ack_id
 *
 */
export const MESSAGING_GCP_PUBSUB_MESSAGE_ACK_ID = /** @type {const} */ 'messaging.gcp_pubsub.message.ack_id';

/**
 * The delivery attempt for a given message.

 *
 * 
 *
 * * @example 2
 *
 */
export const MESSAGING_GCP_PUBSUB_MESSAGE_DELIVERY_ATTEMPT = /** @type {const} */ 'messaging.gcp_pubsub.message.delivery_attempt';

/**
 * The ordering key for a given message. If the attribute is not present, the message does not have an ordering key.

 *
 * 
 *
 * * @example ordering_key
 *
 */
export const MESSAGING_GCP_PUBSUB_MESSAGE_ORDERING_KEY = /** @type {const} */ 'messaging.gcp_pubsub.message.ordering_key';

/**
 * Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set.

 *
 * 
 *
 * * @example myKey
 *
 */
export const MESSAGING_KAFKA_MESSAGE_KEY = /** @type {const} */ 'messaging.kafka.message.key';

/**
 * A boolean that is true if the message is a tombstone.
 *
 * 
 *
 * 
 */
export const MESSAGING_KAFKA_MESSAGE_TOMBSTONE = /** @type {const} */ 'messaging.kafka.message.tombstone';

/**
 * The offset of a record in the corresponding Kafka partition.

 *
 * 
 *
 * * @example 42
 *
 */
export const MESSAGING_KAFKA_OFFSET = /** @type {const} */ 'messaging.kafka.offset';

/**
 * The size of the message body in bytes.

 *
 * 
 *
 * * @example 1439
 *
 */
export const MESSAGING_MESSAGE_BODY_SIZE = /** @type {const} */ 'messaging.message.body.size';

/**
 * The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called "Correlation ID".

 *
 * 
 *
 * * @example MyConversationId
 *
 */
export const MESSAGING_MESSAGE_CONVERSATION_ID = /** @type {const} */ 'messaging.message.conversation_id';

/**
 * The size of the message body and metadata in bytes.

 *
 * 
 *
 * * @example 2738
 *
 */
export const MESSAGING_MESSAGE_ENVELOPE_SIZE = /** @type {const} */ 'messaging.message.envelope.size';

/**
 * A value used by the messaging system as an identifier for the message, represented as a string.
 *
 * 
 *
 * * @example 452a7c7c7c7048c2f887f61572b18fc2
 *
 */
export const MESSAGING_MESSAGE_ID = /** @type {const} */ 'messaging.message.id';

/**
 * The system-specific name of the messaging operation.

 *
 * 
 *
 * * @example ["ack", "nack", "send"]
 *
 */
export const MESSAGING_OPERATION_NAME = /** @type {const} */ 'messaging.operation.name';

/**
 * A string identifying the type of the messaging operation.

 *
 * 
 *
 * 
 */
export const MESSAGING_OPERATION_TYPE = /** @type {const} */ 'messaging.operation.type';

/**
 * RabbitMQ message routing key.

 *
 * 
 *
 * * @example myKey
 *
 */
export const MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY = /** @type {const} */ 'messaging.rabbitmq.destination.routing_key';

/**
 * RabbitMQ message delivery tag

 *
 * 
 *
 * * @example 123
 *
 */
export const MESSAGING_RABBITMQ_MESSAGE_DELIVERY_TAG = /** @type {const} */ 'messaging.rabbitmq.message.delivery_tag';

/**
 * Model of message consumption. This only applies to consumer spans.

 *
 * 
 *
 * 
 */
export const MESSAGING_ROCKETMQ_CONSUMPTION_MODEL = /** @type {const} */ 'messaging.rocketmq.consumption_model';

/**
 * The delay time level for delay message, which determines the message delay time.

 *
 * 
 *
 * * @example 3
 *
 */
export const MESSAGING_ROCKETMQ_MESSAGE_DELAY_TIME_LEVEL = /** @type {const} */ 'messaging.rocketmq.message.delay_time_level';

/**
 * The timestamp in milliseconds that the delay message is expected to be delivered to consumer.

 *
 * 
 *
 * * @example 1665987217045
 *
 */
export const MESSAGING_ROCKETMQ_MESSAGE_DELIVERY_TIMESTAMP = /** @type {const} */ 'messaging.rocketmq.message.delivery_timestamp';

/**
 * It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.

 *
 * 
 *
 * * @example myMessageGroup
 *
 */
export const MESSAGING_ROCKETMQ_MESSAGE_GROUP = /** @type {const} */ 'messaging.rocketmq.message.group';

/**
 * Key(s) of message, another way to mark message besides message id.

 *
 * 
 *
 * * @example [["keyA", "keyB"]]
 *
 */
export const MESSAGING_ROCKETMQ_MESSAGE_KEYS = /** @type {const} */ 'messaging.rocketmq.message.keys';

/**
 * The secondary classifier of message besides topic.

 *
 * 
 *
 * * @example tagA
 *
 */
export const MESSAGING_ROCKETMQ_MESSAGE_TAG = /** @type {const} */ 'messaging.rocketmq.message.tag';

/**
 * Type of message.

 *
 * 
 *
 * 
 */
export const MESSAGING_ROCKETMQ_MESSAGE_TYPE = /** @type {const} */ 'messaging.rocketmq.message.type';

/**
 * Namespace of RocketMQ resources, resources in different namespaces are individual.

 *
 * 
 *
 * * @example myNamespace
 *
 */
export const MESSAGING_ROCKETMQ_NAMESPACE = /** @type {const} */ 'messaging.rocketmq.namespace';

/**
 * Describes the [settlement type](https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock).

 *
 * 
 *
 * 
 */
export const MESSAGING_SERVICEBUS_DISPOSITION_STATUS = /** @type {const} */ 'messaging.servicebus.disposition_status';

/**
 * Number of deliveries that have been attempted for this message.

 *
 * 
 *
 * * @example 2
 *
 */
export const MESSAGING_SERVICEBUS_MESSAGE_DELIVERY_COUNT = /** @type {const} */ 'messaging.servicebus.message.delivery_count';

/**
 * The UTC epoch seconds at which the message has been accepted and stored in the entity.

 *
 * 
 *
 * * @example 1701393730
 *
 */
export const MESSAGING_SERVICEBUS_MESSAGE_ENQUEUED_TIME = /** @type {const} */ 'messaging.servicebus.message.enqueued_time';

/**
 * The messaging system as identified by the client instrumentation.
 *
 * 
 *
 * 
 */
export const MESSAGING_SYSTEM = /** @type {const} */ 'messaging.system';
