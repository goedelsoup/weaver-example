/** DO NOT EDIT -- THIS FILE HAS BEEN GENERATED BY WEAVER */


/**
 * Length of the process.command_args array

 *
 * 
 *
 * * @example [4]
 *
 */
export const PROCESS_ARGS_COUNT = /** @type {const} */ 'process.args_count';

/**
 * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.

 *
 * 
 *
 * * @example ["cmd/otelcol"]
 *
 */
export const PROCESS_COMMAND = /** @type {const} */ 'process.command';

/**
 * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.

 *
 * 
 *
 * * @example [["cmd/otecol", "--config=config.yaml"]]
 *
 */
export const PROCESS_COMMAND_ARGS = /** @type {const} */ 'process.command_args';

/**
 * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.

 *
 * 
 *
 * * @example ["C:\\cmd\\otecol --config=\"my directory\\config.yaml\""]
 *
 */
export const PROCESS_COMMAND_LINE = /** @type {const} */ 'process.command_line';

/**
 * Specifies whether the context switches for this data point were voluntary or involuntary.
 *
 * 
 *
 * 
 */
export const PROCESS_CONTEXT_SWITCH_TYPE = /** @type {const} */ 'process.context_switch_type';

/**
 * The date and time the process was created, in ISO 8601 format.

 *
 * 
 *
 * * @example ["2023-11-21T09:25:34.853Z"]
 *
 */
export const PROCESS_CREATION_TIME = /** @type {const} */ 'process.creation.time';

/**
 * The GNU build ID as found in the `.note.gnu.build-id` ELF section (hex string).

 *
 * 
 *
 * * @example ["c89b11207f6479603b0d49bf291c092c2b719293"]
 *
 */
export const PROCESS_EXECUTABLE_BUILD_ID_GNU = /** @type {const} */ 'process.executable.build_id.gnu';

/**
 * The Go build ID as retrieved by `go tool buildid <go executable>`.

 *
 * 
 *
 * * @example ["foh3mEXu7BLZjsN9pOwG/kATcXlYVCDEFouRMQed_/WwRFB1hPo9LBkekthSPG/x8hMC8emW2cCjXD0_1aY"]
 *
 */
export const PROCESS_EXECUTABLE_BUILD_ID_GO = /** @type {const} */ 'process.executable.build_id.go';

/**
 * Profiling specific build ID for executables. See the OTel specification for Profiles for more information.

 *
 * 
 *
 * * @example ["600DCAFE4A110000F2BF38C493F5FB92"]
 *
 */
export const PROCESS_EXECUTABLE_BUILD_ID_HTLHASH = /** @type {const} */ 'process.executable.build_id.htlhash';

/**
 * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.

 *
 * 
 *
 * * @example ["otelcol"]
 *
 */
export const PROCESS_EXECUTABLE_NAME = /** @type {const} */ 'process.executable.name';

/**
 * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.

 *
 * 
 *
 * * @example ["/usr/bin/cmd/otelcol"]
 *
 */
export const PROCESS_EXECUTABLE_PATH = /** @type {const} */ 'process.executable.path';

/**
 * The exit code of the process.

 *
 * 
 *
 * * @example [127]
 *
 */
export const PROCESS_EXIT_CODE = /** @type {const} */ 'process.exit.code';

/**
 * The date and time the process exited, in ISO 8601 format.

 *
 * 
 *
 * * @example ["2023-11-21T09:26:12.315Z"]
 *
 */
export const PROCESS_EXIT_TIME = /** @type {const} */ 'process.exit.time';

/**
 * The PID of the process's group leader. This is also the process group ID (PGID) of the process.

 *
 * 
 *
 * * @example [23]
 *
 */
export const PROCESS_GROUP_LEADER_PID = /** @type {const} */ 'process.group_leader.pid';

/**
 * Whether the process is connected to an interactive shell.

 *
 * 
 *
 * 
 */
export const PROCESS_INTERACTIVE = /** @type {const} */ 'process.interactive';

/**
 * The control group associated with the process.
 *
 * 
 *
 * * @example ["1:name=systemd:/user.slice/user-1000.slice/session-3.scope", "0::/user.slice/user-1000.slice/user@1000.service/tmux-spawn-0267755b-4639-4a27-90ed-f19f88e53748.scope"]
 *
 */
export const PROCESS_LINUX_CGROUP = /** @type {const} */ 'process.linux.cgroup';

/**
 * The username of the user that owns the process.

 *
 * 
 *
 * * @example ["root"]
 *
 */
export const PROCESS_OWNER = /** @type {const} */ 'process.owner';

/**
 * The type of page fault for this data point. Type `major` is for major/hard page faults, and `minor` is for minor/soft page faults.

 *
 * 
 *
 * 
 */
export const PROCESS_PAGING_FAULT_TYPE = /** @type {const} */ 'process.paging.fault_type';

/**
 * Parent Process identifier (PPID).

 *
 * 
 *
 * * @example [111]
 *
 */
export const PROCESS_PARENT_PID = /** @type {const} */ 'process.parent_pid';

/**
 * Process identifier (PID).

 *
 * 
 *
 * * @example [1234]
 *
 */
export const PROCESS_PID = /** @type {const} */ 'process.pid';

/**
 * The real user ID (RUID) of the process.

 *
 * 
 *
 * * @example [1000]
 *
 */
export const PROCESS_REAL_USER_ID = /** @type {const} */ 'process.real_user.id';

/**
 * The username of the real user of the process.

 *
 * 
 *
 * * @example ["operator"]
 *
 */
export const PROCESS_REAL_USER_NAME = /** @type {const} */ 'process.real_user.name';

/**
 * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.

 *
 * 
 *
 * * @example Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0
 *
 */
export const PROCESS_RUNTIME_DESCRIPTION = /** @type {const} */ 'process.runtime.description';

/**
 * The name of the runtime of this process.

 *
 * 
 *
 * * @example ["OpenJDK Runtime Environment"]
 *
 */
export const PROCESS_RUNTIME_NAME = /** @type {const} */ 'process.runtime.name';

/**
 * The version of the runtime of this process, as returned by the runtime without modification.

 *
 * 
 *
 * * @example 14.0.2
 *
 */
export const PROCESS_RUNTIME_VERSION = /** @type {const} */ 'process.runtime.version';

/**
 * The saved user ID (SUID) of the process.

 *
 * 
 *
 * * @example [1002]
 *
 */
export const PROCESS_SAVED_USER_ID = /** @type {const} */ 'process.saved_user.id';

/**
 * The username of the saved user.

 *
 * 
 *
 * * @example ["operator"]
 *
 */
export const PROCESS_SAVED_USER_NAME = /** @type {const} */ 'process.saved_user.name';

/**
 * The PID of the process's session leader. This is also the session ID (SID) of the process.

 *
 * 
 *
 * * @example [14]
 *
 */
export const PROCESS_SESSION_LEADER_PID = /** @type {const} */ 'process.session_leader.pid';

/**
 * Process title (proctitle)

 *
 * 
 *
 * * @example ["cat /etc/hostname", "xfce4-session", "bash"]
 *
 */
export const PROCESS_TITLE = /** @type {const} */ 'process.title';

/**
 * The effective user ID (EUID) of the process.

 *
 * 
 *
 * * @example [1001]
 *
 */
export const PROCESS_USER_ID = /** @type {const} */ 'process.user.id';

/**
 * The username of the effective user of the process.

 *
 * 
 *
 * * @example ["root"]
 *
 */
export const PROCESS_USER_NAME = /** @type {const} */ 'process.user.name';

/**
 * Virtual process identifier.

 *
 * 
 *
 * * @example [12]
 *
 */
export const PROCESS_VPID = /** @type {const} */ 'process.vpid';

/**
 * The working directory of the process.

 *
 * 
 *
 * * @example ["/root"]
 *
 */
export const PROCESS_WORKING_DIRECTORY = /** @type {const} */ 'process.working_directory';
