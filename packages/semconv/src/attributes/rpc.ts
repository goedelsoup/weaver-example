/** DO NOT EDIT -- THIS FILE HAS BEEN GENERATED BY WEAVER */


/**
 * The [error codes](https://connect.build/docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
 *
 * 
 *
 * 
 */
export const RPC_CONNECT_RPC_ERROR_CODE = /** @type {const} */ 'rpc.connect_rpc.error_code';

/**
 * Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.

 *
 * 
 *
 * * @example ["rpc.request.metadata.my-custom-metadata-attribute=[\"1.2.3.4\", \"1.2.3.5\"]"]
 *
 */
export const RPC_CONNECT_RPC_REQUEST_METADATA = /** @type {const} */ 'rpc.connect_rpc.request.metadata';

/**
 * Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.

 *
 * 
 *
 * * @example ["rpc.response.metadata.my-custom-metadata-attribute=[\"attribute_value\"]"]
 *
 */
export const RPC_CONNECT_RPC_RESPONSE_METADATA = /** @type {const} */ 'rpc.connect_rpc.response.metadata';

/**
 * gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.

 *
 * 
 *
 * * @example ["rpc.grpc.request.metadata.my-custom-metadata-attribute=[\"1.2.3.4\", \"1.2.3.5\"]"]
 *
 */
export const RPC_GRPC_REQUEST_METADATA = /** @type {const} */ 'rpc.grpc.request.metadata';

/**
 * gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.

 *
 * 
 *
 * * @example ["rpc.grpc.response.metadata.my-custom-metadata-attribute=[\"attribute_value\"]"]
 *
 */
export const RPC_GRPC_RESPONSE_METADATA = /** @type {const} */ 'rpc.grpc.response.metadata';

/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * 
 *
 * 
 */
export const RPC_GRPC_STATUS_CODE = /** @type {const} */ 'rpc.grpc.status_code';

/**
 * `error.code` property of response if it is an error response.
 *
 * 
 *
 * * @example [-32700, 100]
 *
 */
export const RPC_JSONRPC_ERROR_CODE = /** @type {const} */ 'rpc.jsonrpc.error_code';

/**
 * `error.message` property of response if it is an error response.
 *
 * 
 *
 * * @example ["Parse error", "User already exists"]
 *
 */
export const RPC_JSONRPC_ERROR_MESSAGE = /** @type {const} */ 'rpc.jsonrpc.error_message';

/**
 * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.

 *
 * 
 *
 * * @example ["10", "request-7", ""]
 *
 */
export const RPC_JSONRPC_REQUEST_ID = /** @type {const} */ 'rpc.jsonrpc.request_id';

/**
 * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.
 *
 * 
 *
 * * @example ["2.0", "1.0"]
 *
 */
export const RPC_JSONRPC_VERSION = /** @type {const} */ 'rpc.jsonrpc.version';

/**
 * Compressed size of the message in bytes.
 *
 * 
 *
 * 
 */
export const RPC_MESSAGE_COMPRESSED_SIZE = /** @type {const} */ 'rpc.message.compressed_size';

/**
 * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.
 *
 * 
 *
 * 
 */
export const RPC_MESSAGE_ID = /** @type {const} */ 'rpc.message.id';

/**
 * Whether this is a received or sent message.
 *
 * 
 *
 * 
 */
export const RPC_MESSAGE_TYPE = /** @type {const} */ 'rpc.message.type';

/**
 * Uncompressed size of the message in bytes.
 *
 * 
 *
 * 
 */
export const RPC_MESSAGE_UNCOMPRESSED_SIZE = /** @type {const} */ 'rpc.message.uncompressed_size';

/**
 * The name of the (logical) method being called, must be equal to the $method part in the span name.
 *
 * 
 *
 * * @example exampleMethod
 *
 */
export const RPC_METHOD = /** @type {const} */ 'rpc.method';

/**
 * The full (logical) name of the service being called, including its package name, if applicable.
 *
 * 
 *
 * * @example myservice.EchoService
 *
 */
export const RPC_SERVICE = /** @type {const} */ 'rpc.service';

/**
 * A string identifying the remoting system. See below for a list of well-known identifiers.
 *
 * 
 *
 * 
 */
export const RPC_SYSTEM = /** @type {const} */ 'rpc.system';
