/** DO NOT EDIT -- THIS FILE HAS BEEN GENERATED BY WEAVER */


/**
 * Heap size target percentage configured by the user, otherwise 100.
 *
 * Instrument: updowncounter
 * Unit: %
 *
 * 
 *
 * * @remarks The value range is [0.0,100.0]. Computed from `/gc/gogc:percent`.

 *
 */
export const GO_CONFIG_GOGC = /** @type {const} */ 'go.config.gogc';

/**
 * Count of live goroutines.
 *
 * Instrument: updowncounter
 * Unit: {goroutine}
 *
 * 
 *
 * * @remarks Computed from `/sched/goroutines:goroutines`.

 *
 */
export const GO_GOROUTINE_COUNT = /** @type {const} */ 'go.goroutine.count';

/**
 * Memory allocated to the heap by the application.
 *
 * Instrument: counter
 * Unit: By
 *
 * 
 *
 * * @remarks Computed from `/gc/heap/allocs:bytes`.

 *
 */
export const GO_MEMORY_ALLOCATED = /** @type {const} */ 'go.memory.allocated';

/**
 * Count of allocations to the heap by the application.
 *
 * Instrument: counter
 * Unit: {allocation}
 *
 * 
 *
 * * @remarks Computed from `/gc/heap/allocs:objects`.

 *
 */
export const GO_MEMORY_ALLOCATIONS = /** @type {const} */ 'go.memory.allocations';

/**
 * Heap size target for the end of the GC cycle.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * 
 *
 * * @remarks Computed from `/gc/heap/goal:bytes`.

 *
 */
export const GO_MEMORY_GC_GOAL = /** @type {const} */ 'go.memory.gc.goal';

/**
 * Go runtime memory limit configured by the user, if a limit exists.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * 
 *
 * * @remarks Computed from `/gc/gomemlimit:bytes`. This metric is excluded if the limit obtained from the Go runtime is math.MaxInt64.

 *
 */
export const GO_MEMORY_LIMIT = /** @type {const} */ 'go.memory.limit';

/**
 * Memory used by the Go runtime.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * 
 *
 * * @remarks Computed from `(/memory/classes/total:bytes - /memory/classes/heap/released:bytes)`.

 *
 */
export const GO_MEMORY_USED = /** @type {const} */ 'go.memory.used';

/**
 * The number of OS threads that can execute user-level Go code simultaneously.
 *
 * Instrument: updowncounter
 * Unit: {thread}
 *
 * 
 *
 * * @remarks Computed from `/sched/gomaxprocs:threads`.

 *
 */
export const GO_PROCESSOR_LIMIT = /** @type {const} */ 'go.processor.limit';

/**
 * The time goroutines have spent in the scheduler in a runnable state before actually running.
 *
 * Instrument: histogram
 * Unit: s
 *
 * 
 *
 * * @remarks Computed from `/sched/latencies:seconds`. Bucket boundaries are provided by the runtime, and are subject to change.

 *
 */
export const GO_SCHEDULE_DURATION = /** @type {const} */ 'go.schedule.duration';
