/** DO NOT EDIT -- THIS FILE HAS BEEN GENERATED BY WEAVER */


/**
 * Number of buffers in the pool.
 *
 * Instrument: updowncounter
 * Unit: {buffer}
 *
 * 
 *
 * 
 */
export const JVM_BUFFER_COUNT = /** @type {const} */ 'jvm.buffer.count';

/**
 * Measure of total memory capacity of buffers.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * 
 *
 * 
 */
export const JVM_BUFFER_MEMORY_LIMIT = /** @type {const} */ 'jvm.buffer.memory.limit';

/**
 * Deprecated, use `jvm.buffer.memory.used` instead.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * * @deprecated Replaced by `jvm.buffer.memory.used`.
 *
 *
 * 
 */
export const JVM_BUFFER_MEMORY_USAGE = /** @type {const} */ 'jvm.buffer.memory.usage';

/**
 * Measure of memory used by buffers.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * 
 *
 * 
 */
export const JVM_BUFFER_MEMORY_USED = /** @type {const} */ 'jvm.buffer.memory.used';

/**
 * Number of classes currently loaded.
 *
 * Instrument: updowncounter
 * Unit: {class}
 *
 * 
 *
 * 
 */
export const JVM_CLASS_COUNT = /** @type {const} */ 'jvm.class.count';

/**
 * Number of classes loaded since JVM start.
 *
 * Instrument: counter
 * Unit: {class}
 *
 * 
 *
 * 
 */
export const JVM_CLASS_LOADED = /** @type {const} */ 'jvm.class.loaded';

/**
 * Number of classes unloaded since JVM start.
 *
 * Instrument: counter
 * Unit: {class}
 *
 * 
 *
 * 
 */
export const JVM_CLASS_UNLOADED = /** @type {const} */ 'jvm.class.unloaded';

/**
 * Number of processors available to the Java virtual machine.
 *
 * Instrument: updowncounter
 * Unit: {cpu}
 *
 * 
 *
 * 
 */
export const JVM_CPU_COUNT = /** @type {const} */ 'jvm.cpu.count';

/**
 * Recent CPU utilization for the process as reported by the JVM.
 *
 * Instrument: gauge
 * Unit: 1
 *
 * 
 *
 * * @remarks The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()).

 *
 */
export const JVM_CPU_RECENT_UTILIZATION = /** @type {const} */ 'jvm.cpu.recent_utilization';

/**
 * CPU time used by the process as reported by the JVM.
 *
 * Instrument: counter
 * Unit: s
 *
 * 
 *
 * 
 */
export const JVM_CPU_TIME = /** @type {const} */ 'jvm.cpu.time';

/**
 * Duration of JVM garbage collection actions.
 *
 * Instrument: histogram
 * Unit: s
 *
 * 
 *
 * 
 */
export const JVM_GC_DURATION = /** @type {const} */ 'jvm.gc.duration';

/**
 * Measure of memory committed.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * 
 *
 * 
 */
export const JVM_MEMORY_COMMITTED = /** @type {const} */ 'jvm.memory.committed';

/**
 * Measure of initial memory requested.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * 
 *
 * 
 */
export const JVM_MEMORY_INIT = /** @type {const} */ 'jvm.memory.init';

/**
 * Measure of max obtainable memory.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * 
 *
 * 
 */
export const JVM_MEMORY_LIMIT = /** @type {const} */ 'jvm.memory.limit';

/**
 * Measure of memory used.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * 
 *
 * 
 */
export const JVM_MEMORY_USED = /** @type {const} */ 'jvm.memory.used';

/**
 * Measure of memory used, as measured after the most recent garbage collection event on this pool.
 *
 * Instrument: updowncounter
 * Unit: By
 *
 * 
 *
 * 
 */
export const JVM_MEMORY_USED_AFTER_LAST_GC = /** @type {const} */ 'jvm.memory.used_after_last_gc';

/**
 * Average CPU load of the whole system for the last minute as reported by the JVM.
 *
 * Instrument: gauge
 * Unit: {run_queue_item}
 *
 * 
 *
 * * @remarks The value range is [0,n], where n is the number of CPU cores - or a negative number if the value is not available. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/java.management/java/lang/management/OperatingSystemMXBean.html#getSystemLoadAverage()).

 *
 */
export const JVM_SYSTEM_CPU_LOAD_1M = /** @type {const} */ 'jvm.system.cpu.load_1m';

/**
 * Recent CPU utilization for the whole system as reported by the JVM.
 *
 * Instrument: gauge
 * Unit: 1
 *
 * 
 *
 * * @remarks The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getCpuLoad()).

 *
 */
export const JVM_SYSTEM_CPU_UTILIZATION = /** @type {const} */ 'jvm.system.cpu.utilization';

/**
 * Number of executing platform threads.
 *
 * Instrument: updowncounter
 * Unit: {thread}
 *
 * 
 *
 * 
 */
export const JVM_THREAD_COUNT = /** @type {const} */ 'jvm.thread.count';
