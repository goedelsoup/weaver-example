/** DO NOT EDIT -- THIS FILE HAS BEEN GENERATED BY WEAVER */


/**
 * The number of actively running jobs for a cronjob
 *
 * Instrument: updowncounter
 * Unit: {job}
 *
 * 
 *
 * * @remarks This metric aligns with the `active` field of the
[K8s CronJobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#cronjobstatus-v1-batch).

This metric SHOULD, at a minimum, be reported against a
[`k8s.cronjob`](../resource/k8s.md#cronjob) resource.

 *
 */
export const K8S_CRONJOB_ACTIVE_JOBS = /** @type {const} */ 'k8s.cronjob.active_jobs';

/**
 * Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod
 *
 * Instrument: updowncounter
 * Unit: {node}
 *
 * 
 *
 * * @remarks This metric aligns with the `currentNumberScheduled` field of the
[K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.daemonset`](../resource/k8s.md#daemonset) resource.

 *
 */
export const K8S_DAEMONSET_CURRENT_SCHEDULED_NODES = /** @type {const} */ 'k8s.daemonset.current_scheduled_nodes';

/**
 * Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod)
 *
 * Instrument: updowncounter
 * Unit: {node}
 *
 * 
 *
 * * @remarks This metric aligns with the `desiredNumberScheduled` field of the
[K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.daemonset`](../resource/k8s.md#daemonset) resource.

 *
 */
export const K8S_DAEMONSET_DESIRED_SCHEDULED_NODES = /** @type {const} */ 'k8s.daemonset.desired_scheduled_nodes';

/**
 * Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod
 *
 * Instrument: updowncounter
 * Unit: {node}
 *
 * 
 *
 * * @remarks This metric aligns with the `numberMisscheduled` field of the
[K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.daemonset`](../resource/k8s.md#daemonset) resource.

 *
 */
export const K8S_DAEMONSET_MISSCHEDULED_NODES = /** @type {const} */ 'k8s.daemonset.misscheduled_nodes';

/**
 * Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready
 *
 * Instrument: updowncounter
 * Unit: {node}
 *
 * 
 *
 * * @remarks This metric aligns with the `numberReady` field of the
[K8s DaemonSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#daemonsetstatus-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.daemonset`](../resource/k8s.md#daemonset) resource.

 *
 */
export const K8S_DAEMONSET_READY_NODES = /** @type {const} */ 'k8s.daemonset.ready_nodes';

/**
 * Total number of available replica pods (ready for at least minReadySeconds) targeted by this deployment
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `availableReplicas` field of the
[K8s DeploymentStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#deploymentstatus-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.deployment`](../resource/k8s.md#deployment) resource.

 *
 */
export const K8S_DEPLOYMENT_AVAILABLE_PODS = /** @type {const} */ 'k8s.deployment.available_pods';

/**
 * Number of desired replica pods in this deployment
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `replicas` field of the
[K8s DeploymentSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#deploymentspec-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.deployment`](../resource/k8s.md#deployment) resource.

 *
 */
export const K8S_DEPLOYMENT_DESIRED_PODS = /** @type {const} */ 'k8s.deployment.desired_pods';

/**
 * Current number of replica pods managed by this horizontal pod autoscaler, as last seen by the autoscaler
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `currentReplicas` field of the
[K8s HorizontalPodAutoscalerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerstatus-v2-autoscaling)

 *
 */
export const K8S_HPA_CURRENT_PODS = /** @type {const} */ 'k8s.hpa.current_pods';

/**
 * Desired number of replica pods managed by this horizontal pod autoscaler, as last calculated by the autoscaler
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `desiredReplicas` field of the
[K8s HorizontalPodAutoscalerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerstatus-v2-autoscaling)

 *
 */
export const K8S_HPA_DESIRED_PODS = /** @type {const} */ 'k8s.hpa.desired_pods';

/**
 * The upper limit for the number of replica pods to which the autoscaler can scale up
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `maxReplicas` field of the
[K8s HorizontalPodAutoscalerSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerspec-v2-autoscaling)

 *
 */
export const K8S_HPA_MAX_PODS = /** @type {const} */ 'k8s.hpa.max_pods';

/**
 * The lower limit for the number of replica pods to which the autoscaler can scale down
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `minReplicas` field of the
[K8s HorizontalPodAutoscalerSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#horizontalpodautoscalerspec-v2-autoscaling)

 *
 */
export const K8S_HPA_MIN_PODS = /** @type {const} */ 'k8s.hpa.min_pods';

/**
 * The number of pending and actively running pods for a job
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `active` field of the
[K8s JobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobstatus-v1-batch).

This metric SHOULD, at a minimum, be reported against a
[`k8s.job`](../resource/k8s.md#job) resource.

 *
 */
export const K8S_JOB_ACTIVE_PODS = /** @type {const} */ 'k8s.job.active_pods';

/**
 * The desired number of successfully finished pods the job should be run with
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `completions` field of the
[K8s JobSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobspec-v1-batch).

This metric SHOULD, at a minimum, be reported against a
[`k8s.job`](../resource/k8s.md#job) resource.

 *
 */
export const K8S_JOB_DESIRED_SUCCESSFUL_PODS = /** @type {const} */ 'k8s.job.desired_successful_pods';

/**
 * The number of pods which reached phase Failed for a job
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `failed` field of the
[K8s JobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobstatus-v1-batch).

This metric SHOULD, at a minimum, be reported against a
[`k8s.job`](../resource/k8s.md#job) resource.

 *
 */
export const K8S_JOB_FAILED_PODS = /** @type {const} */ 'k8s.job.failed_pods';

/**
 * The max desired number of pods the job should run at any given time
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `parallelism` field of the
[K8s JobSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobspec-v1-batch.

This metric SHOULD, at a minimum, be reported against a
[`k8s.job`](../resource/k8s.md#job) resource.

 *
 */
export const K8S_JOB_MAX_PARALLEL_PODS = /** @type {const} */ 'k8s.job.max_parallel_pods';

/**
 * The number of pods which reached phase Succeeded for a job
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `succeeded` field of the
[K8s JobStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#jobstatus-v1-batch).

This metric SHOULD, at a minimum, be reported against a
[`k8s.job`](../resource/k8s.md#job) resource.

 *
 */
export const K8S_JOB_SUCCESSFUL_PODS = /** @type {const} */ 'k8s.job.successful_pods';

/**
 * Describes number of K8s namespaces that are currently in a given phase.
 *
 * Instrument: updowncounter
 * Unit: {namespace}
 *
 * 
 *
 * * @remarks This metric SHOULD, at a minimum, be reported against a
[`k8s.namespace`](../resource/k8s.md#namespace) resource.

 *
 */
export const K8S_NAMESPACE_PHASE = /** @type {const} */ 'k8s.namespace.phase';

/**
 * Total CPU time consumed
 *
 * Instrument: counter
 * Unit: s
 *
 * 
 *
 * * @remarks Total CPU time consumed by the specific Node on all available CPU cores

 *
 */
export const K8S_NODE_CPU_TIME = /** @type {const} */ 'k8s.node.cpu.time';

/**
 * Node's CPU usage, measured in cpus. Range from 0 to the number of allocatable CPUs
 *
 * Instrument: gauge
 * Unit: {cpu}
 *
 * 
 *
 * * @remarks CPU usage of the specific Node on all available CPU cores, averaged over the sample window

 *
 */
export const K8S_NODE_CPU_USAGE = /** @type {const} */ 'k8s.node.cpu.usage';

/**
 * Memory usage of the Node
 *
 * Instrument: gauge
 * Unit: By
 *
 * 
 *
 * * @remarks Total memory usage of the Node

 *
 */
export const K8S_NODE_MEMORY_USAGE = /** @type {const} */ 'k8s.node.memory.usage';

/**
 * Node network errors
 *
 * Instrument: counter
 * Unit: {error}
 *
 * 
 *
 * 
 */
export const K8S_NODE_NETWORK_ERRORS = /** @type {const} */ 'k8s.node.network.errors';

/**
 * Network bytes for the Node
 *
 * Instrument: counter
 * Unit: By
 *
 * 
 *
 * 
 */
export const K8S_NODE_NETWORK_IO = /** @type {const} */ 'k8s.node.network.io';

/**
 * The time the Node has been running
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * * @remarks Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.
The actual accuracy would depend on the instrumentation and operating system.

 *
 */
export const K8S_NODE_UPTIME = /** @type {const} */ 'k8s.node.uptime';

/**
 * Total CPU time consumed
 *
 * Instrument: counter
 * Unit: s
 *
 * 
 *
 * * @remarks Total CPU time consumed by the specific Pod on all available CPU cores

 *
 */
export const K8S_POD_CPU_TIME = /** @type {const} */ 'k8s.pod.cpu.time';

/**
 * Pod's CPU usage, measured in cpus. Range from 0 to the number of allocatable CPUs
 *
 * Instrument: gauge
 * Unit: {cpu}
 *
 * 
 *
 * * @remarks CPU usage of the specific Pod on all available CPU cores, averaged over the sample window

 *
 */
export const K8S_POD_CPU_USAGE = /** @type {const} */ 'k8s.pod.cpu.usage';

/**
 * Memory usage of the Pod
 *
 * Instrument: gauge
 * Unit: By
 *
 * 
 *
 * * @remarks Total memory usage of the Pod

 *
 */
export const K8S_POD_MEMORY_USAGE = /** @type {const} */ 'k8s.pod.memory.usage';

/**
 * Pod network errors
 *
 * Instrument: counter
 * Unit: {error}
 *
 * 
 *
 * 
 */
export const K8S_POD_NETWORK_ERRORS = /** @type {const} */ 'k8s.pod.network.errors';

/**
 * Network bytes for the Pod
 *
 * Instrument: counter
 * Unit: By
 *
 * 
 *
 * 
 */
export const K8S_POD_NETWORK_IO = /** @type {const} */ 'k8s.pod.network.io';

/**
 * The time the Pod has been running
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * * @remarks Instrumentations SHOULD use a gauge with type `double` and measure uptime in seconds as a floating point number with the highest precision available.
The actual accuracy would depend on the instrumentation and operating system.

 *
 */
export const K8S_POD_UPTIME = /** @type {const} */ 'k8s.pod.uptime';

/**
 * Total number of available replica pods (ready for at least minReadySeconds) targeted by this replicaset
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `availableReplicas` field of the
[K8s ReplicaSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicasetstatus-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.replicaset`](../resource/k8s.md#replicaset) resource.

 *
 */
export const K8S_REPLICASET_AVAILABLE_PODS = /** @type {const} */ 'k8s.replicaset.available_pods';

/**
 * Number of desired replica pods in this replicaset
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `replicas` field of the
[K8s ReplicaSetSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicasetspec-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.replicaset`](../resource/k8s.md#replicaset) resource.

 *
 */
export const K8S_REPLICASET_DESIRED_PODS = /** @type {const} */ 'k8s.replicaset.desired_pods';

/**
 * Total number of available replica pods (ready for at least minReadySeconds) targeted by this replication controller
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `availableReplicas` field of the
[K8s ReplicationControllerStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicationcontrollerstatus-v1-core)

 *
 */
export const K8S_REPLICATION_CONTROLLER_AVAILABLE_PODS = /** @type {const} */ 'k8s.replication_controller.available_pods';

/**
 * Number of desired replica pods in this replication controller
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `replicas` field of the
[K8s ReplicationControllerSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#replicationcontrollerspec-v1-core)

 *
 */
export const K8S_REPLICATION_CONTROLLER_DESIRED_PODS = /** @type {const} */ 'k8s.replication_controller.desired_pods';

/**
 * The number of replica pods created by the statefulset controller from the statefulset version indicated by currentRevision
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `currentReplicas` field of the
[K8s StatefulSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetstatus-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.statefulset`](../resource/k8s.md#statefulset) resource.

 *
 */
export const K8S_STATEFULSET_CURRENT_PODS = /** @type {const} */ 'k8s.statefulset.current_pods';

/**
 * Number of desired replica pods in this statefulset
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `replicas` field of the
[K8s StatefulSetSpec](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetspec-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.statefulset`](../resource/k8s.md#statefulset) resource.

 *
 */
export const K8S_STATEFULSET_DESIRED_PODS = /** @type {const} */ 'k8s.statefulset.desired_pods';

/**
 * The number of replica pods created for this statefulset with a Ready Condition
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `readyReplicas` field of the
[K8s StatefulSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetstatus-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.statefulset`](../resource/k8s.md#statefulset) resource.

 *
 */
export const K8S_STATEFULSET_READY_PODS = /** @type {const} */ 'k8s.statefulset.ready_pods';

/**
 * Number of replica pods created by the statefulset controller from the statefulset version indicated by updateRevision
 *
 * Instrument: updowncounter
 * Unit: {pod}
 *
 * 
 *
 * * @remarks This metric aligns with the `updatedReplicas` field of the
[K8s StatefulSetStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#statefulsetstatus-v1-apps).

This metric SHOULD, at a minimum, be reported against a
[`k8s.statefulset`](../resource/k8s.md#statefulset) resource.

 *
 */
export const K8S_STATEFULSET_UPDATED_PODS = /** @type {const} */ 'k8s.statefulset.updated_pods';
