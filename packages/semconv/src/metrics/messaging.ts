/** DO NOT EDIT -- THIS FILE HAS BEEN GENERATED BY WEAVER */


/**
 * Number of messages that were delivered to the application.
 *
 * Instrument: counter
 * Unit: {message}
 *
 * 
 *
 * * @remarks Records the number of messages pulled from the broker or number of messages dispatched to the application in push-based scenarios.
The metric SHOULD be reported once per message delivery. For example, if receiving and processing operations are both instrumented for a single message delivery, this counter is incremented when the message is received and not reported when it is processed.

 *
 */
export const MESSAGING_CLIENT_CONSUMED_MESSAGES = /** @type {const} */ 'messaging.client.consumed.messages';

/**
 * Duration of messaging operation initiated by a producer or consumer client.
 *
 * Instrument: histogram
 * Unit: s
 *
 * 
 *
 * * @remarks This metric SHOULD NOT be used to report processing duration - processing duration is reported in `messaging.process.duration` metric.

 *
 */
export const MESSAGING_CLIENT_OPERATION_DURATION = /** @type {const} */ 'messaging.client.operation.duration';

/**
 * Deprecated. Use `messaging.client.sent.messages` instead.
 *
 * Instrument: counter
 * Unit: {message}
 *
 * * @deprecated Replaced by `messaging.client.sent.messages`.
 *
 *
 * 
 */
export const MESSAGING_CLIENT_PUBLISHED_MESSAGES = /** @type {const} */ 'messaging.client.published.messages';

/**
 * Number of messages producer attempted to send to the broker.
 *
 * Instrument: counter
 * Unit: {message}
 *
 * 
 *
 * * @remarks This metric MUST NOT count messages that were created but haven't yet been sent.

 *
 */
export const MESSAGING_CLIENT_SENT_MESSAGES = /** @type {const} */ 'messaging.client.sent.messages';

/**
 * Duration of processing operation.
 *
 * Instrument: histogram
 * Unit: s
 *
 * 
 *
 * * @remarks This metric MUST be reported for operations with `messaging.operation.type` that matches `process`.

 *
 */
export const MESSAGING_PROCESS_DURATION = /** @type {const} */ 'messaging.process.duration';

/**
 * Deprecated. Use `messaging.client.consumed.messages` instead.
 *
 * Instrument: counter
 * Unit: {message}
 *
 * * @deprecated Replaced by `messaging.client.consumed.messages`.
 *
 *
 * 
 */
export const MESSAGING_PROCESS_MESSAGES = /** @type {const} */ 'messaging.process.messages';

/**
 * Deprecated. Use `messaging.client.operation.duration` instead.
 *
 * Instrument: histogram
 * Unit: s
 *
 * * @deprecated Replaced by `messaging.client.operation.duration`.
 *
 *
 * 
 */
export const MESSAGING_PUBLISH_DURATION = /** @type {const} */ 'messaging.publish.duration';

/**
 * Deprecated. Use `messaging.client.produced.messages` instead.
 *
 * Instrument: counter
 * Unit: {message}
 *
 * * @deprecated Replaced by `messaging.client.produced.messages`.
 *
 *
 * 
 */
export const MESSAGING_PUBLISH_MESSAGES = /** @type {const} */ 'messaging.publish.messages';

/**
 * Deprecated. Use `messaging.client.operation.duration` instead.
 *
 * Instrument: histogram
 * Unit: s
 *
 * * @deprecated Replaced by `messaging.client.operation.duration`.
 *
 *
 * 
 */
export const MESSAGING_RECEIVE_DURATION = /** @type {const} */ 'messaging.receive.duration';

/**
 * Deprecated. Use `messaging.client.consumed.messages` instead.
 *
 * Instrument: counter
 * Unit: {message}
 *
 * * @deprecated Replaced by `messaging.client.consumed.messages`.
 *
 *
 * 
 */
export const MESSAGING_RECEIVE_MESSAGES = /** @type {const} */ 'messaging.receive.messages';
