/** DO NOT EDIT -- THIS FILE HAS BEEN GENERATED BY WEAVER */


/**
 * Event loop maximum delay.
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * * @remarks Value can be retrieved from value `histogram.max` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)

 *
 */
export const NODEJS_EVENTLOOP_DELAY_MAX = /** @type {const} */ 'nodejs.eventloop.delay.max';

/**
 * Event loop mean delay.
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * * @remarks Value can be retrieved from value `histogram.mean` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)

 *
 */
export const NODEJS_EVENTLOOP_DELAY_MEAN = /** @type {const} */ 'nodejs.eventloop.delay.mean';

/**
 * Event loop minimum delay.
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * * @remarks Value can be retrieved from value `histogram.min` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)

 *
 */
export const NODEJS_EVENTLOOP_DELAY_MIN = /** @type {const} */ 'nodejs.eventloop.delay.min';

/**
 * Event loop 50 percentile delay.
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * * @remarks Value can be retrieved from value `histogram.percentile(50)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)

 *
 */
export const NODEJS_EVENTLOOP_DELAY_P50 = /** @type {const} */ 'nodejs.eventloop.delay.p50';

/**
 * Event loop 90 percentile delay.
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * * @remarks Value can be retrieved from value `histogram.percentile(90)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)

 *
 */
export const NODEJS_EVENTLOOP_DELAY_P90 = /** @type {const} */ 'nodejs.eventloop.delay.p90';

/**
 * Event loop 99 percentile delay.
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * * @remarks Value can be retrieved from value `histogram.percentile(99)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)

 *
 */
export const NODEJS_EVENTLOOP_DELAY_P99 = /** @type {const} */ 'nodejs.eventloop.delay.p99';

/**
 * Event loop standard deviation delay.
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * * @remarks Value can be retrieved from value `histogram.stddev` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)

 *
 */
export const NODEJS_EVENTLOOP_DELAY_STDDEV = /** @type {const} */ 'nodejs.eventloop.delay.stddev';

/**
 * Cumulative duration of time the event loop has been in each state.
 *
 * Instrument: counter
 * Unit: s
 *
 * 
 *
 * * @remarks Value can be retrieved from [`performance.eventLoopUtilization([utilization1[, utilization2]])`](https://nodejs.org/api/perf_hooks.html#performanceeventlooputilizationutilization1-utilization2)

 *
 */
export const NODEJS_EVENTLOOP_TIME = /** @type {const} */ 'nodejs.eventloop.time';

/**
 * Event loop utilization.
 *
 * Instrument: gauge
 * Unit: 1
 *
 * 
 *
 * * @remarks The value range is [0.0, 1.0] and can be retrieved from [`performance.eventLoopUtilization([utilization1[, utilization2]])`](https://nodejs.org/api/perf_hooks.html#performanceeventlooputilizationutilization1-utilization2)

 *
 */
export const NODEJS_EVENTLOOP_UTILIZATION = /** @type {const} */ 'nodejs.eventloop.utilization';
