/** DO NOT EDIT -- THIS FILE HAS BEEN GENERATED BY WEAVER */


/**
 * Measures the duration of outbound RPC.
 *
 * Instrument: histogram
 * Unit: ms
 *
 * 
 *
 * * @remarks While streaming RPCs may record this metric as start-of-batch
to end-of-batch, it's hard to interpret in practice.

**Streaming**: N/A.

 *
 */
export const RPC_CLIENT_DURATION = /** @type {const} */ 'rpc.client.duration';

/**
 * Measures the size of RPC request messages (uncompressed).
 *
 * Instrument: histogram
 * Unit: By
 *
 * 
 *
 * * @remarks **Streaming**: Recorded per message in a streaming batch

 *
 */
export const RPC_CLIENT_REQUEST_SIZE = /** @type {const} */ 'rpc.client.request.size';

/**
 * Measures the number of messages received per RPC.
 *
 * Instrument: histogram
 * Unit: {count}
 *
 * 
 *
 * * @remarks Should be 1 for all non-streaming RPCs.

**Streaming**: This metric is required for server and client streaming RPCs

 *
 */
export const RPC_CLIENT_REQUESTS_PER_RPC = /** @type {const} */ 'rpc.client.requests_per_rpc';

/**
 * Measures the size of RPC response messages (uncompressed).
 *
 * Instrument: histogram
 * Unit: By
 *
 * 
 *
 * * @remarks **Streaming**: Recorded per response in a streaming batch

 *
 */
export const RPC_CLIENT_RESPONSE_SIZE = /** @type {const} */ 'rpc.client.response.size';

/**
 * Measures the number of messages sent per RPC.
 *
 * Instrument: histogram
 * Unit: {count}
 *
 * 
 *
 * * @remarks Should be 1 for all non-streaming RPCs.

**Streaming**: This metric is required for server and client streaming RPCs

 *
 */
export const RPC_CLIENT_RESPONSES_PER_RPC = /** @type {const} */ 'rpc.client.responses_per_rpc';

/**
 * Measures the duration of inbound RPC.
 *
 * Instrument: histogram
 * Unit: ms
 *
 * 
 *
 * * @remarks While streaming RPCs may record this metric as start-of-batch
to end-of-batch, it's hard to interpret in practice.

**Streaming**: N/A.

 *
 */
export const RPC_SERVER_DURATION = /** @type {const} */ 'rpc.server.duration';

/**
 * Measures the size of RPC request messages (uncompressed).
 *
 * Instrument: histogram
 * Unit: By
 *
 * 
 *
 * * @remarks **Streaming**: Recorded per message in a streaming batch

 *
 */
export const RPC_SERVER_REQUEST_SIZE = /** @type {const} */ 'rpc.server.request.size';

/**
 * Measures the number of messages received per RPC.
 *
 * Instrument: histogram
 * Unit: {count}
 *
 * 
 *
 * * @remarks Should be 1 for all non-streaming RPCs.

**Streaming** : This metric is required for server and client streaming RPCs

 *
 */
export const RPC_SERVER_REQUESTS_PER_RPC = /** @type {const} */ 'rpc.server.requests_per_rpc';

/**
 * Measures the size of RPC response messages (uncompressed).
 *
 * Instrument: histogram
 * Unit: By
 *
 * 
 *
 * * @remarks **Streaming**: Recorded per response in a streaming batch

 *
 */
export const RPC_SERVER_RESPONSE_SIZE = /** @type {const} */ 'rpc.server.response.size';

/**
 * Measures the number of messages sent per RPC.
 *
 * Instrument: histogram
 * Unit: {count}
 *
 * 
 *
 * * @remarks Should be 1 for all non-streaming RPCs.

**Streaming**: This metric is required for server and client streaming RPCs

 *
 */
export const RPC_SERVER_RESPONSES_PER_RPC = /** @type {const} */ 'rpc.server.responses_per_rpc';
