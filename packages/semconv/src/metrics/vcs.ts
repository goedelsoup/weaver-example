/** DO NOT EDIT -- THIS FILE HAS BEEN GENERATED BY WEAVER */


/**
 * The number of changes (pull requests/merge requests/changelists) in a repository, categorized by their state (e.g. open or merged)
 *
 * Instrument: updowncounter
 * Unit: {change}
 *
 * 
 *
 * 
 */
export const VCS_CHANGE_COUNT = /** @type {const} */ 'vcs.change.count';

/**
 * The time duration a change (pull request/merge request/changelist) has been in a given state.
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * 
 */
export const VCS_CHANGE_DURATION = /** @type {const} */ 'vcs.change.duration';

/**
 * The amount of time since its creation it took a change (pull request/merge request/changelist) to get the first approval.
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * 
 */
export const VCS_CHANGE_TIME_TO_APPROVAL = /** @type {const} */ 'vcs.change.time_to_approval';

/**
 * The amount of time since its creation it took a change (pull request/merge request/changelist) to get merged into the target(base) ref.
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * 
 */
export const VCS_CHANGE_TIME_TO_MERGE = /** @type {const} */ 'vcs.change.time_to_merge';

/**
 * The number of unique contributors to a repository
 *
 * Instrument: gauge
 * Unit: {contributor}
 *
 * 
 *
 * 
 */
export const VCS_CONTRIBUTOR_COUNT = /** @type {const} */ 'vcs.contributor.count';

/**
 * The number of refs of type branch or tag in a repository.
 *
 * Instrument: updowncounter
 * Unit: {ref}
 *
 * 
 *
 * 
 */
export const VCS_REF_COUNT = /** @type {const} */ 'vcs.ref.count';

/**
 * The number of lines added/removed in a ref (branch) relative to the ref from the `vcs.ref.base.name` attribute.
 *
 * Instrument: gauge
 * Unit: {line}
 *
 * 
 *
 * * @remarks This metric should be reported for each `vcs.line_change.type` value. For example if a ref added 3 lines and removed 2 lines,
instrumentation SHOULD report two measurements: 3 and 2 (both positive numbers).
If number of lines added/removed should be calculated from the start of time, then `vcs.ref.base.name` SHOULD be set to an empty string.

 *
 */
export const VCS_REF_LINES_DELTA = /** @type {const} */ 'vcs.ref.lines_delta';

/**
 * The number of revisions (commits) a ref (branch) is ahead/behind the branch from the `vcs.ref.base.name` attribute
 *
 * Instrument: gauge
 * Unit: {revision}
 *
 * 
 *
 * * @remarks This metric should be reported for each `vcs.revision_delta.direction` value. For example if branch `a` is 3 commits behind and 2 commits ahead of `trunk`,
instrumentation SHOULD report two measurements: 3 and 2 (both positive numbers) and `vcs.ref.base.name` is set to `trunk`.

 *
 */
export const VCS_REF_REVISIONS_DELTA = /** @type {const} */ 'vcs.ref.revisions_delta';

/**
 * Time a ref (branch) created from the default branch (trunk) has existed. The `ref.type` attribute will always be `branch`
 *
 * Instrument: gauge
 * Unit: s
 *
 * 
 *
 * 
 */
export const VCS_REF_TIME = /** @type {const} */ 'vcs.ref.time';

/**
 * The number of repositories in an organization.
 *
 * Instrument: updowncounter
 * Unit: {repository}
 *
 * 
 *
 * 
 */
export const VCS_REPOSITORY_COUNT = /** @type {const} */ 'vcs.repository.count';
